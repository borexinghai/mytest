/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 * 官方解说是翻译的，写的文绉绉的特别费解。给官方答案加点注释吧
 * 官方题解思路:
 * 1.动态规划，dp[i]表示数组A中从下标i（包括i）开始到
 * 最后一个数为止分成K个连续非空子数组的子数组的平均值的和的最大值（用xxx代指）
 * 2.代码没有直接一上来就求i~(N - 1)分为K个非空连续子数组的xxx值，
 * 而是先让i本身从0到(N-1)之间变化，求i~(N-1)分为一个非空连续子数组（一个就是自己，就是没有分）的xxx值。
 * 然后再求i本身从0到(N-1)之间变化，i~(N-1)分为2个非空连续子数组的xxx值。
 * 以此类推，最后求分为3个、4个知道K个非空连续子数组的xxx值。
 * 那么i等于是，得到的不就是0~(N-1)分为K个非空连续子数组的值吗。
 * 本来是需要用二维数组dp[i][K]的，但是通过上面的说明，
 * 我们可以只用一维数组dp[i],因为我们是先求分为1个非空连续子数组,
 * 再求分为2个，再求分为3个，最后求分为K个非空连续子数组。i固定时，i~（N - 1）分为k个
 * 非空连续子数组是用i~（N - 1）分为K -1个非空连续子数组的xxx值求出来的，跟k-2、k-3
 * 等等等其它一切k的取值无关，所以可以只用一维数组存放dp结果.
 */
var largestSumOfAverages = function(A, K) {
    const N = A.length
    // 前缀和， A数组中从0开始前i位数的和
    const p = new Array(N + 1)
    p[0] = 0
    for(let i = 0;i < N;i++) {
        p[i + 1] = p[i] + A[i]
    }
    const dp = new Array(N)
    // 第一次dp， dp[i]表示A数组中下标i~(N - 1)分为一个非空连续子数组的平均值
    for(let i = 0;i < N;i++) {
        dp[i] = (p[N] - p[i]) / (N - i)
    }

    // 第2次到第K次dp。k = 1，代表第二次，k = 2，代表第三次，以此类推，k = K - 1代表第K次dp
    // 第k + 1次dp的结果dp[i]就是A数组中从下标i开始到N-1结束分为k+1个非空连续子数组的xxx值
    for(let k = 1;k < K;k++) {
        // 先把i固定，j变化作为分隔点
        // 分隔一次i~(N - 1)变为2个连续数组
        // 分隔两次i~N-1变为3个连续数组
        // 分隔K- 1次i~(N -1)变为K个连续数组
        // 这里有一点很好证明:一个数组分割后，他的xxx值一定比不分割要大，这是这里dp能求到正确值的前提条件
        for(let i = 0;i < N;i++) {
            for(let j = i + 1;j < N;j++) {
                dp[i] = Math.max(dp[i], dp[j] + ((p[j] - p[i]) / (j - i)))
            }
        }
    }
    return dp[0]
};